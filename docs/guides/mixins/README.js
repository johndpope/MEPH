Ext.data.JsonP.mixins({"guide":"<h1 id='mixins-section-mixed-up-with-mixins'>Mixed up with Mixins</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/mixins-section-what%27s-a-mixin'>What's a mixin</a></li>\n<li><a href='#!/guide/mixins-section-mixins'>Mixins</a></li>\n</ol>\n</div>\n\n<p>A guide about mixins.</p>\n\n<h2 id='mixins-section-what%27s-a-mixin'>What's a mixin</h2>\n\n<p>If you don't know what a mixin, <a href=\"http://en.wikipedia.org/wiki/Mixin\">check here</a>.</p>\n\n<h2 id='mixins-section-mixins'>Mixins</h2>\n\n<p>In MEPH, a mixin can be set two different ways, either has an array of string references to the mixin source, or as a literal object.</p>\n\n<pre><code>        ...\n         mixins: {\n            observable: 'MEPH.mixins.Observable',\n            referrerable: 'MEPH.mixins.Referrerable'\n        },\n        ...\n\n        or\n\n        mixins: ['MEPH.mixins.Observable', 'MEPH.mixins.Referrerable']\n</code></pre>\n\n<p>When using the first style, mixins are added to the instance object as properties of the instance.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>        ...\n        initialize: function(){\n            var me= this;\n            me.mixins.observable.init.apply(me, arguments);\n            me.mixins.referrerable.init.apply(me, arguments);\n        }\n</code></pre>\n\n<p>When the second style, an array, is used to describe the set of mixins, the functions of the mixin are applied to the instance of the class.</p>\n","title":"Mixins"});