MEPH.define("MEPH.math.expression.Evaluator",{statics:{evaluate:function(b,a){var c=MEPH.math.expression.Evaluator;b=c.preprocess(b);a=a||{};a.count=a.count||0;a.count++;if(!b instanceof Expression){throw"incorrect input."}if(a.count>256){return b.copy()}switch(b.type){case Expression.type.addition:return c.evalAddition(b,a);case Expression.type.subtraction:return c.evalSubtraction(b,a);case Expression.type.fraction:case Expression.type.division:return c.evalDivision(b,a);case Expression.type.multiplication:return c.evalMultiplication(b,a);case Expression.type.power:return c.evalPower(b,a);case Expression.type.variable:return c.evalVariable(b,a);case Expression.type.integral:return c.evalIntegral(b,a);case Expression.type.derivative:return c.evalDerivative(b,a);case Expression.type.e:return c.evalE(b,a);case Expression.type.ln:return c.evalLn(b,a);case Expression.type.abs:return c.evalAbs(b,a);case Expression.type.summation:return c.evalSummation(b,a);case Expression.type.log:return c.evalLog(b,a);case Expression.type.cos:case Expression.type.tan:case Expression.type.sec:case Expression.type.sin:case Expression.type.csc:case Expression.type.cosh:case Expression.type.tanh:case Expression.type.sech:case Expression.type.coth:case Expression.type.sinh:case Expression.type.csch:case Expression.type.cot:return c.evalTrig(b,a);case Expression.type.sqrt:return c.evalSqrt(b,a);default:throw new Error("unhandled case : "+b.type)}},preprocess:function(a){switch(typeof(a)){case"string":case"number":return Expression.variable(a);default:return a}},evalTrig:function(e,c){var b=MEPH.math.expression.Factor;var f=MEPH.math.expression.Evaluator;var a=e.partOrDefault(Expression["function"].input);if(b.isNumerical(a)){var d;switch(e.type){case Expression.type.csch:d=Math.csch(b.getNumerical(a));break;case Expression.type.cosh:d=Math.cosh(b.getNumerical(a));break;case Expression.type.sech:d=Math.sech(b.getNumerical(a));break;case Expression.type.tanh:d=Math.tanh(b.getNumerical(a));break;case Expression.type.sinh:d=Math.sinh(b.getNumerical(a));break;case Expression.type.coth:d=Math.coth(b.getNumerical(a));break;case Expression.type.csc:d=Math.csc(b.getNumerical(a));break;case Expression.type.sec:d=Math.sec(b.getNumerical(a));break;case Expression.type.tan:d=Math.tan(b.getNumerical(a));break;case Expression.type.cos:d=Math.cos(b.getNumerical(a));break;case Expression.type.sin:d=Math.sin(b.getNumerical(a));break;case Expression.type.cot:d=Math.cot(b.getNumerical(a));break;default:throw new Error("unhandled trignometric case : "+e.type)}if(!isNaN(d)&&(d%1)===0){return(d)}}switch(e.type){case Expression.type.coth:return Expression.coth(f.evaluate(a,c));case Expression.type.csch:return Expression.csch(f.evaluate(a,c));case Expression.type.cosh:return Expression.cosh(f.evaluate(a,c));case Expression.type.sech:return Expression.sech(f.evaluate(a,c));case Expression.type.tanh:return Expression.tanh(f.evaluate(a,c));case Expression.type.sinh:return Expression.sinh(f.evaluate(a,c));case Expression.type.sec:return Expression.sec(f.evaluate(a,c));case Expression.type.tan:return Expression.tan(f.evaluate(a,c));case Expression.type.cos:return Expression.cos(f.evaluate(a,c));case Expression.type.sin:return Expression.sin(f.evaluate(a,c));case Expression.type.csc:return Expression.csc(f.evaluate(a,c));case Expression.type.cot:return Expression.cot(f.evaluate(a,c));default:throw new Error("unhandled trignometric case : "+e.type)}},evalLog:function(f,c){var b=MEPH.math.expression.Factor;var g=MEPH.math.expression.Evaluator;var a=f.partOrDefault(Expression["function"].input);var d=f.partOrDefault(Expression["function"].base);if(b.isNumerical(a)&&b.isNumerical(d)){var e=Math.log(b.getNumerical(a))/Math.log(b.getNumerical(d));if(!isNaN(e)){return(e)}}return Expression.log(g.evaluate(a,c),g.evaluate(d,c))},evalSqrt:function(e,c){var b=MEPH.math.expression.Factor;var f=MEPH.math.expression.Evaluator;var a=e.partOrDefault(Expression["function"].input);if(b.isNumerical(a)&&b.isNumerical(base)){var d=Math.sqrt(b.getNumerical(a));if(!isNaN(d)&&(d%1)===0){return(d)}}return Expression.sqrt(f.evaluate(a,c))},evalSummation:function(a){console.log("Need to actually implement summation.");return a.copy()},evalAbs:function(e,c){var b=MEPH.math.expression.Factor;var f=MEPH.math.expression.Evaluator;var a=e.partOrDefault(Expression["function"].input);if(b.isNumerical(a)){var d=Math.abs(b.getNumerical(a));if(!isNaN(d)){return(d)}}return Expression.abs(f.evaluate(a,c))},evalE:function(e,c){var b=MEPH.math.expression.Factor;var f=MEPH.math.expression.Evaluator;var a=e.partOrDefault(Expression["function"].input);if(b.isNumerical(a)){var d=Math.pow(Math.E,b.getNumerical(a));if((d%1)===0){return Expression.variable(d)}}return Expression.e(f.evaluate(a,c))},evalLn:function(e,c){var b=MEPH.math.expression.Factor;var f=MEPH.math.expression.Evaluator;var a=e.partOrDefault(Expression["function"].input);if(b.isNumerical(a)){var d=Math.log(b.getNumerical(a))/Math.log(Math.E);if((d%1)===0){d}}return Expression.ln(f.evaluate(a,c))},evalVariable:function(b){var a=MEPH.math.expression.Factor;return a.getNumerical(b,true)},evalPower:function(e,b){var a=MEPH.math.expression.Factor;var f=MEPH.math.expression.Evaluator;var d=e.partOrDefault(Expression["function"].base);var c=e.partOrDefault(Expression["function"].power);d=f.evaluate(d,b);c=f.evaluate(c,b);if(a.isNumerical(c)){if(Expression.isZero(c)){return Expression.one()}else{if(Expression.isOne(c)){if(d instanceof Expression){return d.copy()}return Expression.variable(d)}}if(a.isNumerical(d)){return Expression.variable(Math.pow(d,c))}else{return Expression.power(d,c)}}else{return Expression.power(d,c)}},evalMultiplication:function(g,j){var h=MEPH.math.expression.Factor;var f=MEPH.math.expression.Evaluator;var b=function(l){return l.summation(function(m,p,o){if(o===0){var n=f.evaluate(m,j);return h.getNumerical(n)}return p*h.getNumerical(f.evaluate(m,j))})};var c=g.getParts().select(function(l){return f.evaluate(l.val,j)});if(f.allNumbers(c)){var k=b(c);return Expression.variable(k)}var e=c.where(function(l){return h.isNumerical(l)&&!Expression.isOne(l)});var a=c.where(function(l){return !h.isNumerical(l)});var d=Expression.variable(b(e));if(!Expression.isOne(d)&&e.length&&a.length){return Expression.multiplication.apply(this,[d].concat(a))}else{if(a.length){if(a.length>1){return Expression.multiplication.apply(this,a)}else{var i=a.first();return Expression.variableOr(i).copy()}}else{return Expression.variableOr(d).copy()}}},evalDivision:function(g,i){var h=MEPH.math.expression.Factor;var f=MEPH.math.expression.Evaluator;var d=function(j){return j.summation(function(k,m,l){if(l===0){return f.evaluate(k.val,i)}return m/f.evaluate(k.val,i)})};var b=g.getParts().select(function(j){return f.evaluate(j.val,i)});var a,e=0;do{if(a===undefined){a=b[e] instanceof Expression?b[e].value():b[e];if(!h.isNumerical(a)&&!(a instanceof Expression)){a=Expression.variable(a)}}else{if(h.isNumerical(b[e])){var c=h.getNumerical(b[e]);if(c===0){if(a>0){return Expression.variable(Number.POSITIVE_INFINITY)}else{return Expression.variable(Number.NEGATIVE_INFINITY)}}if((a/c)%1===0){a=a/c}else{a=Expression.variable(a);break}}else{a=Expression.variable(a);break}}e++}while((typeof a==="number")&&e<b.length);if(a instanceof Expression){return Expression.division.apply(this,[a].concat(b.subset(e)))}else{return Expression.variable(a)}},evalAddition:function(e,h){var f=MEPH.math.expression.Factor;var d=MEPH.math.expression.Evaluator;if(d.allNumbers(e)){var i=e.getParts().summation(function(j,k){return f.getNumerical(j.val)+k});return Expression.variable(i)}else{var g=e.copy();var c=g.getParts().select(function(j){return d.evaluate(j.val,h)});var b=c.where(function(j){return f.isNumerical(j)}).summation(function(j,k){return d.evaluate(j,h)+k});var a=c.where(function(j){return !f.isNumerical(j)}).select(function(j){return j});if(b!==0&&a.length){return Expression.addition.apply(this,[Expression.variable(b)].concat(a))}else{if(b===0&&a.length){return Expression.addition.apply(this,a)}else{if(a.length===0){return Expression.addition.apply(this,[b])}}}}},orderDependentEval:function(f,c,e){var g=MEPH.math.expression.Evaluator;var a=MEPH.math.expression.Factor;var d,b=0;do{if(d===undefined){d=f[b] instanceof Expression?f[b].value():f[b];if(!a.isNumerical(d)&&!(d instanceof Expression)){d=Expression.variable(d)}}else{if(a.isNumerical(f[b])){d=c(f[b],d);if(d instanceof Expression){break}}else{d=Expression.variable(d);break}}b++}while((typeof d==="number")&&b<f.length);if(d instanceof Expression){return e.apply(this,[d].concat(f.subset(b)))}else{return Expression.variable(d)}},evalSubtraction:function(f,c){var g=MEPH.math.expression.Evaluator;var b=MEPH.math.expression.Factor;var e=f.getParts().select(function(h,j){if(j===0){if(h.val instanceof Expression){return h.val.copy()}return Expression.variable(h.val)}else{if(h.val instanceof Expression){return Expression.multiplication(-1,h.val.copy())}return Expression.multiplication(-1,h.val)}});var a=g.evaluate(Expression.addition.apply(this,e),c);e=a.getParts().select(function(h,k){if(k===0){if(h.val instanceof Expression){return h.val.copy()}return Expression.variable(h.val)}else{var j;j=Expression.Flatten(Expression.multiplication(-1,(h.val instanceof Expression)?h.val.copy():h.val),Expression.type.multiplication);if(j===null){throw"invalid value for t : Evaluator.js"}return g.evaluate(j,c)}});var a=g.orderDependentEval(e,function d(h,i){var j=b.getNumerical(h);if(j===0){if(i>0){return Expression.variable(Number.POSITIVE_INFINITY)}else{return Expression.variable(Number.NEGATIVE_INFINITY)}}if((i-j)%1===0){i=i-j}else{i=Expression.variable(i)}return i},Expression.subtraction);if(!(a instanceof Expression)){a=Expression.variable(a)}return a},evalDerivative:function(f,l){var e=MEPH.math.expression.Evaluator;var g=MEPH.math.expression.Factor;var i=Expression.getMatchingRules(f);var k=i.where(function(m){return m.type===Expression.type.derivative});if(l&&k.length>1){if(l.strategy){k=l.strategy(k)}}if(k.length===1){var h=k.first().rule;Expression.clearMarks(f);Expression.matchRule(f,h,true);var a=ExpressionTranslation.translationPool().first(function(m){return m.some(function(n){return n===h.name()})});var d=a.first(function(m){return m!==h.name()});var c=Expression.getRule(d,"Derivation");var j=ExpressionTranslation.translate(f,c);var b=e.evaluate(j,l);return b}else{if(k.length>1){throw new Error("dont know which rule to apply")}else{return f}}},evalIntegral:function(g,m){var f=MEPH.math.expression.Evaluator;var h=MEPH.math.expression.Factor;var j=g.partOrDefault(Expression["function"].input);g.remove(j);j=f.evaluate(j,m);g.addPart(Expression["function"].input,Expression.variableOr(j));var k=Expression.getMatchingRules(g);var e=k.where(function(n){return n.type===Expression.type.integral});if(m&&e.length>1){if(m.strategy){e=m.strategy(e)}}if(e.length===1){var i=e.first().rule;Expression.clearMarks(g);Expression.matchRule(g,i,true);var a=ExpressionTranslation.translationPool().first(function(n){return n.some(function(o){return o===i.name()})});var d=a.first(function(n){return n!==i.name()});var c=Expression.getRule(d);var l=ExpressionTranslation.translate(g,c);var b=f.evaluate(l,m);return b}else{return g}},allNumbers:function(c){var a=MEPH.math.expression.Factor;var b=c;if(!Array.isArray(c)){b=c.getParts()}return b.all(function(d){return typeof(a.getNumerical(d.val))==="number"})}}});