MEPH.define("MEPH.audio.graph.AudioGraphReader",{requires:["MEPH.audio.Audio"],properties:{$graph:null},statics:{cloneUnique:function(c){var b=MEPH.audio.graph.AudioGraphReader.collectIds(c).select(function(e){return{n:MEPH.GUID(),o:e}});var d=JSON.stringify(c);b.foreach(function(e){d=d.replace(new RegExp(e.o,"g"),e.n)});var a=JSON.parse(d);return a},collectIds:function(b){var c=b.nodes.concatFluent(function(d){return[d.id].concat(d.data.nodeInputs.select(function(e){return e.id})).concat(d.data.nodeOutputs.select(function(e){return e.id})).concat(d.data.subGraph?MEPH.audio.graph.AudioGraphReader.collectIds(d.data.subGraph):[])});var a=b.connections.select(function(d){return d.id});a=a.concat(b.connections.concatFluent(function(d){return d.zones}));a=a.concat(b.connections.concatFluent(function(d){return d.nodes}));if(b.id){a.push(b.id)}return c.concat(a)}},setGraph:function(b){var a=this;a.$graph=b},getGraph:function(){var a=this;return a.$graph},getNodes:function(c){var b=this;c=c||b.getGraph();var a=c.nodes;a=a.concat(c.nodes.where(function(d){return d.data.subGraph}).concatFluent(function(d){return b.getNodes(d.data.subGraph)}));return a.where(b.nodesToIgnore)},getConnections:function(c){var b=this;c=c||b.getGraph();var a=c.connections;a=a.concat(c.nodes.where(function(d){return d.data.subGraph}).concatFluent(function(d){return b.getConnections(d.data.subGraph)}));return a},constructAudioNodeList:function(){var c=this;if(c.hasSingleRoot()){var a=c.getRoot();var b=c.fillListWithOrderedTree(a);return b}},connectGraph:function(i){var e=this;if(e.hasSingleRoot()){var g=e.getNodeOfType(i,"MEPH.audio.graph.node.InputNode");var b=e.getNodesConnectedToOutputsOf(g,i);var h=b.select(function(j){return{zones:e.getZoneToConnectToFromInput(g,j,i),node:j}});var f=e.getRoot();var c=f.data.nodeOutputs.where(function(j){return j.type==="AudioBuffer"});var a=e.getGraph();var d=h.select(function(j){return{id:MEPH.GUID(),nodes:[j.node.id,f.id],zones:[j.zones.first(),c.first().id]}});i.nodes.where(e.nodesToIgnore).foreach(function(j){a.nodes.push(j)});i.connections.foreach(function(j){if(!i.nodes.where(function(k){return !e.nodesToIgnore(k)}).some(function(k){return j.nodes.some(function(l){return l===k.id})})){a.connections.push(j)}});d.foreach(function(j){a.connections.push(j)})}},getNodeOfType:function(c,a){var b=this;return c.nodes.first(function(d){return d.data.type===a})},getNodesConnectedToOutputsOf:function(d,e){var c=this;var b=e.connections.where(function(f){return f.nodes.some(function(g){return d.id===g})});var a=b.select(function(f){return f.nodes.first(function(g){return d.id!==g})});return e.nodes.where(function(f){return a.some(function(g){return g===f.id})})},getZoneToConnectToFromInput:function(d,b,c){var a=c.connections.where(function(e){return e.nodes.all(function(f){return f===d.id||f===b.id})}).select(function(e){return e.zones.first(function(f){return b.data.nodeInputs.some(function(g){return g.id===f})})});return a},createAudio:function(){var b=this,a=new MEPH.audio.Audio();var c=b.constructAudioNodeList();c.foreach(function(d){switch(d.node.data.type){case"MEPH.audio.graph.node.WaveShaperNode":a.waveShaper(d);break;case"MEPH.audio.graph.node.PannerNode":a.panner(d);break;case"MEPH.audio.graph.node.OscillatorNode":a.oscillator(d);break;case"MEPH.audio.graph.node.GainNode":a.gain(d);break;case"MEPH.audio.graph.node.DynamicsCompressorNode":a.dynamicsCompressor(d);break;case"MEPH.audio.graph.node.ChannelMergerNode":a.merger(d);break;case"MEPH.audio.graph.node.ChannelSplitterNode":a.splitter(d);break;case"MEPH.audio.graph.node.BiquadFilter":a.biquadFilter(d);break;case"MEPH.audio.graph.node.DelayNode":a.delay(d);break;case"MEPH.audio.graph.node.Convolver":a.convolver(d);break;case"MEPH.audio.graph.node.AudioBufferSourceNode":a.buffer(null,d);break;default:throw new Error("unhandled type : "+d.data.type)}});return a},fillListWithOrderedTree:function(b,e){var d=this;var a=d.getInputs(b);var c=d.constructAudioNode(b,a);e=e||[];e.removeWhere(function(f){return f.node.id===c.node.id});e.unshift(c);a.foreach(function(f){d.fillListWithOrderedTree(f.node,e)});return e},nodesToIgnore:function(a){return a.data.type!=="MEPH.audio.graph.node.OutputNode"&&a.data.type!=="MEPH.audio.graph.node.InputNode"&&a.data.type!=="MEPH.audio.graph.node.GeneratedNode"},getRoots:function(){var c=this,b=c.getConnections(),a=c.getNodes();b.foreach(function(d){d.zones.foreach(function(e){var f=a.first(function(g){return c.getOutputZones(g).first(function(h){return h.id===e})});if(f){a.removeWhere(function(g){return g==f})}})});return a},getOutputZones:function(b){var a=this;return b.data.nodeOutputs},getInputZones:function(b){var a=this;return b.data.nodeInputs},hasSingleRoot:function(){return this.getRoots().length===1},getRoot:function(){return this.getRoots().first()},getIndependentNodes:function(c){var b=this;var a=b.getConnections().where(function(d){var f=d.nodes.first(function(g){return g===c.id});if(f){var e=b.getOutputZonesOfNode(f,d.zones);return e}return false}).select(function(d){var e=d.nodes.first(function(f){return f!==c.id});return b.getNodeById(e)});return a},getOutputZonesOfNode:function(d,a){var c=this,b=c.getZonesOfNode(d);return b.outputs.first(function(e){return a.some(function(f){return f===e.id})})},getInputZonesOfNode:function(d,a){var c=this,b=c.getZonesOfNode(d);return b.inputs.first(function(e){return a.some(function(f){return f===e.id})})},getZonesOfNode:function(b){var a=this;return{inputs:a.getNodeById(b).data.nodeInputs,outputs:a.getNodeById(b).data.nodeOutputs}},getZone:function(c){var b=this,a=b.getNodes();return a.selectFirst(function(d){var e=b.getZonesOfNode(d.id);return e.inputs.first(function(f){return f.id===c})||e.outputs.first(function(f){return f.id===c})})},getNodeByZone:function(a){var c=this,b=c.getNodes();return b.first(function(e){var d=c.getZonesOfNode(e.id);return d.inputs.first(function(f){return f===a})||d.outputs.first(function(f){return f===a})})},getInputs:function(c){var b=this;var a=b.getConnections().where(function(d){var e=d.zones.select(function(g){return b.getZone(g)}).where();if(e.length<2){return false}var f=e.first(function(g){return !g.output});return b.getNodeByZone(f)===c}).select(function(d){var e=d.zones.select(function(i){return b.getZone(i)});var g=e.first(function(i){return !i.output});var f=e.first(function(i){return i.output});var h=b.getNodeByZone(f);return{node:h,connection:f,to:g}});return a},constructAudioNode:function(c,a){var b=this;switch(c.data.type){case"MEPH.audio.graph.node.GainNode":return b.createGainNode(c,a);case"MEPH.audio.graph.node.BiquadFilter":return b.createBiquadFilter(c,a);case"MEPH.audio.graph.node.PannerNode":return b.createPannerNode(c,a);case"MEPH.audio.graph.node.AudioBufferSourceNode":return b.createAudioBufferSourceNode(c,a);case"MEPH.audio.graph.node.ChannelMergerNode":return b.createChannelMergerNode(c,a);case"MEPH.audio.graph.node.ChannelSplitterNode":return b.createChannelSplitterNode(c,a);case"MEPH.audio.graph.node.Convolver":return b.createConvolverNode(c,a);case"MEPH.audio.graph.node.DelayNode":return b.createDelayNode(c,a);case"MEPH.audio.graph.node.DynamicsCompressorNode":return b.createDynamicsCompressorNode(c,a);case"MEPH.audio.graph.node.OscillatorNode":return b.createOscillatorNode(c,a);case"MEPH.audio.graph.node.WaveShaperNode":return b.createWaveShaperNode(c,a);default:throw new Error("unhandled type : "+c.data.type)}},createWaveShaperNode:function(c,a){var b=this;return{node:c,buffer:b.getNodeInputValue(c,a,"buffer"),curve:b.getNodeInputValue(c,a,"curve"),oversample:b.getNodeInputValue(c,a,"oversample")}},createOscillatorNode:function(c,a){var b=this;return{node:c,buffer:b.getNodeInputValue(c,a,"buffer"),detune:b.getNodeInputValue(c,a,"detune"),frequency:b.getNodeInputValue(c,a,"frequency"),type:b.getNodeInputValue(c,a,"type")}},createDynamicsCompressorNode:function(c,a){var b=this;return{node:c,buffer:b.getNodeInputValue(c,a,"buffer"),knee:b.getNodeInputValue(c,a,"knee"),ratio:b.getNodeInputValue(c,a,"ratio"),reduction:b.getNodeInputValue(c,a,"reduction"),release:b.getNodeInputValue(c,a,"release"),threshold:b.getNodeInputValue(c,a,"threshold"),attack:b.getNodeInputValue(c,a,"attack")}},createDelayNode:function(c,a){var b=this;return{node:c,buffer:b.getNodeInputValue(c,a,"buffer"),delayTime:b.getNodeInputValue(c,a,"delayTime")}},createConvolverNode:function(c,a){var b=this;return{node:c,convobuffer:b.getNodeInputValue(c,a,"convobuffer"),buffer:b.getNodeInputValue(c,a,"buffer"),normalize:b.getNodeInputValue(c,a,"normalize")}},createChannelSplitterNode:function(c,a){var b=this;return{node:c,buffer:b.getNodeInputValue(c,a,"buffer")}},createChannelMergerNode:function(c,a){var b=this;return{node:c,buffer:b.getNodeInputValue(c,a,"buffer"),buffer2:b.getNodeInputValue(c,a,"buffer2"),buffer3:b.getNodeInputValue(c,a,"buffer3"),buffer4:b.getNodeInputValue(c,a,"buffer4")}},createAudioBufferSourceNode:function(c,a){var b=this;return{node:c,source:b.getNodeInputValue(c,a,"source"),loop:b.getNodeInputValue(c,a,"loop"),loopEnd:b.getNodeInputValue(c,a,"loopEnd"),loopStart:b.getNodeInputValue(c,a,"loopStart"),playbackRate:b.getNodeInputValue(c,a,"playbackRate")}},createPannerNode:function(c,a){var b=this;return{node:c,coneInnerAngle:b.getNodeInputValue(c,a,"coneInnerAngle"),coneOuterAngle:b.getNodeInputValue(c,a,"coneOuterAngle"),coneOuterGain:b.getNodeInputValue(c,a,"coneOuterGain"),refDistance:b.getNodeInputValue(c,a,"refDistance"),maxDistance:b.getNodeInputValue(c,a,"maxDistance"),rolloffFactor:b.getNodeInputValue(c,a,"rolloffFactor"),panningModel:b.getNodeInputValue(c,a,"panningModel"),buffer:b.getNodeInputValue(c,a,"buffer")}},createBiquadFilter:function(b,e){var g=this,a=g.getNodeInputValue(b,e,"q"),f=g.getNodeInputValue(b,e,"frequency"),i=g.getNodeInputValue(b,e,"gain"),h=g.getNodeInputValue(b,e,"type"),d=g.getNodeInputValue(b,e,"detune"),c=g.getNodeInputValue(b,e,"buffer");return{node:b,Q:a,frequency:f,detune:d,gain:i,type:h,buffer:c}},createGainNode:function(d,b){var c=this,e=c.getNodeInputValue(d,b,"gain"),a=c.getNodeInputValue(d,b,"buffer");return{node:d,gain:e,buffer:a}},getNodeInputValue:function(f,a,c){var e=this;var b=e.getNodeInput(f,c),g;if(!b){return null}switch(b.type){case"Number":g=isNaN(b.defaultValue)?null:parseFloat(b.defaultValue);break;case"Boolean":g=(b.defaultValue&&b.defaultValue.toLowerCase()==="true")?true:false;break;default:g=b.defaultValue||null;break}var d=a.first(function(h){return h.to.name===c});if(d){return d.connection}return g},getNodeInput:function(b,a){return b.data.nodeInputs.first(function(c){return c.name===a})},getNodeById:function(b){var a=this;return a.getNodes().first(function(c){return c.id===b})}});