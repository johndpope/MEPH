MEPH.define("MEPH.audio.graph.node.BiquadFilter",{extend:"MEPH.audio.graph.node.Node",requires:["MEPH.audio.graph.node.controls.AudioRange","MEPH.audio.graph.node.controls.AudioSelect"],alias:"biquadfilter",templates:true,properties:{qTitle:"",frequencyTitle:"",detuneTitle:"",gainTitle:"",typeTitle:"",biquadtypes:null,qvalue:null,frequencyvalue:null,detunevalue:null,gainvalue:null,tyepeinputvalue:null},initialize:function(){var b=this;b.nodecontrols=b.nodecontrols||[];b.nodecontrols.push("bufferoutput");b.nodecontrols.push("bufferinput");b.nodecontrols.push("q");b.nodecontrols.push("frequency");b.nodecontrols.push("detune");b.nodecontrols.push("gain");b.nodecontrols.push("typeinput");b.great();var a=["lowpass","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass"];b.nodeInputs.push(b.createInput("buffer",MEPH.audio.graph.node.Node.AudioBuffer));b.nodeInputs.push(b.createInput("q",MEPH.audio.graph.node.Node.Number,{path:"Q.value"}));b.nodeInputs.push(b.createInput("frequency",MEPH.audio.graph.node.Node.Number,{path:"frequency.value"}));b.nodeInputs.push(b.createInput("detune",MEPH.audio.graph.node.Node.Number,{path:"detune.value"}));b.nodeInputs.push(b.createInput("gain",MEPH.audio.graph.node.Node.Number,{path:"gain.value"}));b.nodeInputs.push(b.createInput("type",MEPH.audio.graph.node.Node.String,{values:a}));b.types=a;b.nodeOutputs.push(b.createOutput("buffer",MEPH.audio.graph.node.Node.AudioBuffer))},onLoaded:function(){var a=this;a.great();a.title="Biquad Filter";a.qTitle="Q";a.frequencyTitle="frequency";a.detuneTitle="detune";a.gainTitle="gain";a.typeTitle="type";a.biquadtypes=a.types.select()}});