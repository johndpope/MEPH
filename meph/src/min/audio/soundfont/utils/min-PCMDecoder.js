MEPH.define("MEPH.audio.soundfont.utils.PCMDecoder",{requires:["MEPH.audio.soundfont.NoteSample","MEPH.audio.soundfont.utils.SFByteArray","MEPH.audio.soundfont.utils.PCM16BitMono44Khz"],extend:"MEPH.audio.soundfont.SFObject",properties:{_bytes:null,_strategy:null},initialize:function(a,b){if(null==a){throw new Error("bytes must not be null")}this._bytes=a;this._strategy=b},getSeconds:function(){return this.getNumSamples()/this._strategy.samplingRate},getNumSamples:function(a){a=a||44100;if(this._strategy.samplingRate==a){return this.getNumSamples()}else{return Math.floor(this.getNumSamples()*a/this._strategy.samplingRate)}},extract:function(c,b,a){if(a>=this.getNumSamples()){return 0}if(a+b>this.getNumSamples()){b=this.getNumSamples()-a}this._strategy.read32BitStereo44KHz(this._bytes,this.getDataOffset(),c,b,a);return b},stream:function(b,c,a){},getSupported:function(){return null!=this._strategy},getCompressionType:function(){return this._strategy.getCompressionType()},getNumSamples:function(){if(this._bytes instanceof SFByteArray){return this._bytes._source.byteLength/this._strategy.getBlockAlign()}return this._bytes.length/this._strategy.getBlockAlign()},getSamplingRate:function(){return this._strategy.getSamplingRate()},getNumChannels:function(){return this._strategy.getNumChannels()},getBits:function(){return this._strategy.getBits()},getBlockAlign:function(){return this._strategy.getBlockAlign()},getDataOffset:function(){return 0},getBytes:function(){return this._bytes},dispose:function(){this._bytes=null},toString:function(){return"[Decoder strategy: "+this._strategy+", numSamples: "+this.getNumSamples()+"]"}});