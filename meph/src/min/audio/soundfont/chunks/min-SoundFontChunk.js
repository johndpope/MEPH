MEPH.define("MEPH.audio.soundfont.chunks.SoundFontChunk",{requires:["MEPH.audio.soundfont.utils.SFByteArray","MEPH.audio.soundfont.chunks.data.DataChunk","MEPH.audio.soundfont.chunks.info.InfoChunk","MEPH.audio.soundfont.chunks.samples.SamplesChunk","MEPH.audio.soundfont.chunks.data.SampleRecord"],extend:"MEPH.audio.soundfont.chunks.Chunk",statics:{SOUND_FONT_BANK_TAG:"sfbk"},properties:{infoChunk:null,samplesChunk:null,dataChunk:null},initialize:function(a){this.callParent("SoundFontChunk",a)},getPresetRecords:function(){return this.dataChunk.getPresetRecords()},getInstrumentRecords:function(){return this.dataChunk.getInstrumentRecords()},getSampleRecords:function(){return this.dataChunk.getSampleRecords()},getNumSamples:function(){return this.dataChunk.getNumSamples()},getSampleRecord:function(a){return this.dataChunk.getSampleRecord(a)},parse:function(a){var c=a.readString(4);var d=a.readDWord();if(c!=Chunk.RIFF_TAG){throw new Error("SoundFontParser::Incorrect format: "+c)}var b=a.readString(4);if(b!=SoundFontChunk.SOUND_FONT_BANK_TAG){throw new Error("SoundFontParser::Incorrect type: "+b)}while(a.bytesAvailable()>7){c=a.readString(4);d=a.readDWord();if(c==Chunk.LIST_TAG){b=a.readString(4);switch(b){case InfoChunk.INFO_TAG:this.infoChunk=new InfoChunk(a);break;case SamplesChunk.SAMPLE_DATA_TAG:this.samplesChunk=new SamplesChunk(a);break;case DataChunk.DATA_TAG:this.dataChunk=new DataChunk(a);break}}}this.dataChunk.setSampleBytes(this.samplesChunk)}});