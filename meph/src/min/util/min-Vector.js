var pgx=pgx||{};MEPH.define("MEPH.util.Vector",{properties:{},initialize:function(a,d,c,b){if(b){this._id=pgx.Vector.Id++}if(arguments.length>0){this._x=a;this._y=d;this._z=0;if(c!=undefined){this._z=c}if(b){this._adjacentEdges=new BinaryHeap(function(e){return e.length()})}}Object.defineProperty(this,"x",{get:function(){return this._x}});Object.defineProperty(this,"y",{get:function(){return this._y}});Object.defineProperty(this,"z",{get:function(){return this._z}})},statics:{Create:function(a){if(Array.isArray(a)||a instanceof J3DIVector3){return new MEPH.util.Vector(a[0],a[1],a[2])}return new MEPH.util.Vector(a.x,a.y,a.z)},Lerp:function(b,c,a){return b+(c-b)*a},Lerp2D:function(c,b,a){return new MEPH.util.Vector(MEPH.util.Vector.Lerp(c._x,b._x,a),MEPH.util.Vector.Lerp(c._y,b._y,a))},Lerp3D:function(c,b,a){return new MEPH.util.Vector(MEPH.util.Vector.Lerp(c._x,b._x,a),MEPH.util.Vector.Lerp(c._y,b._y,a),MEPH.util.Vector.Lerp(c._z,b._z,a))},Slope:function(c,a){var b=a.subtract(c);return b.y/b.x},Line:function(c,b){var a=MEPH.math.Vector.Slope(c,b);return{p1:new MEPH.math.Vector(0,0),p2:new MEPH.math.Vector(1,a)}},Zero:function(){return new MEPH.util.Vector(0,0,0)},Id:0},ToDebug:function(){return"x : "+this._x+"y : "+this._y+"z : "+this._z},equals:function(a){if(this._x==a._x&&this._y==a._y){return true}return false},equals3d:function(a){if(this._x==a._x&&this._y==a._y&&this._z==a._z){return true}return false},get_id:function(){return this._id},copy:function(){return new pgx.Vector(this._x,this._y,this._z)},destroy:function(a){this.remove_adjacentEdge(a)},consume:function(b){while(b.get_adjacentEdges().size()>0){var a=b.get_adjacentEdges().pop();a.swapVertex(b,this);this.add_adjacentEdge(a)}},add_adjacentEdge:function(a){this._adjacentEdges.push(a)},get_adjacentEdges:function(){return this._adjacentEdges},remove_adjacentEdge:function(a){this._adjacentEdges.remove(a)},reset:function(){this._adjacentEdges.clear()},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y)},distance:function(b){var a=this._x-b._x;var c=this._y-b._y;return Math.sqrt(a*a+c*c)},distanceSquared:function(c){var a=this._x-c._x;var d=this._y-c._y;var b=Math.sqrt(a*a+d*d);return b*b},set:function(a,c,b){this.setX(a);this.setY(c);this.setZ(b)},setZ:function(a){this._z=a},setY:function(a){this._y=a},setX:function(a){this._x=a},setXY:function(a,b){this.setX(a);this.setY(b)},dot:function(a){return this._x*a._x+this._y*a._y},cross:function(a){return this._x*a._y-this._y*a._x},unit:function(){return this.divide(this.length())},getVectorOfLength:function(a){return this.divide(this.length()/a)},unitEquals:function(){this.divideEquals(this.length());return this},add:function(a){return new pgx.Vector(this._x+a._x,this._y+a._y,this._z+a._z)},addEquals:function(a){this._x+=a._x;this._y+=a._y;return this},subtract:function(a){return new pgx.Vector(this._x-a._x,this._y-a._y,this._z-a._z)},subtractEquals:function(a){this._x-=a._x;this._y-=a._y;return this},mapdivide:function(a){return new pgx.Vector(this._x/a._x,this._y/a._y)},mapmultiply:function(a){return new pgx.Vector(this._x*a._x,this._y*a._y)},square:function(){return this._x*this._x+this._y*this._y},multiply:function(a){return new pgx.Vector(this._x*a,this._y*a)},multiplyEquals:function(a){this._x*=a;this._y*=a;return this},divide:function(a){if(a==0){return new pgx.Vector(0,0)}return new pgx.Vector(this._x/a,this._y/a)},divideEquals:function(a){this._x/=a;this._y/=a;return this},perp:function(){return new pgx.Vector(-this._y,this._x)},perpendicular:function(a){return this.subtract(this.project(a))},project:function(b){var a=this.dot(b)/b.dot(b);return b.multiply(a)},toString:function(){return this._x+","+this._y},fromPoints:function(b,a){return new Vector2D(a.x-b.x,a.y-b.y)},angleBetween:function(a){return Math.acos(this.dot(a)/(this.length()*a.length()))},rotate:function(e){var b=Math.cos(e);var a=Math.sin(e);var d=this._x*b-this._y*a;var c=this._x*a+this._y*b;return new pgx.Vector(d,c)},random:function(){return new pgx.Vector(2*(Math.random()-0.5),2*(Math.random()-0.5))}});