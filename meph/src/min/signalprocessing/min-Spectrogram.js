MEPH.define("MEPH.signalprocessing.Spectrogram",{alias:"spectrogram",templates:true,requires:["MEPH.signalprocessing.SignalProcessor","MEPH.math.FFT","MEPH.util.Style","MEPH.math.Util","MEPH.util.Vector","MEPH.util.Renderer"],extend:"MEPH.control.Control",statics:{},properties:{window:null,source:null,step:256,autoprocess:false,data:null,processor:null},initialize:function(){var a=this;a.callParent.apply(a,arguments);a.renderer=new MEPH.util.Renderer();a.on("altered",function(d,b){var c=parseFloat(a.rowheaders);var h=parseFloat(a.columns);var g=parseFloat(a.rows);var e=parseFloat(a.columnheaders);if(b.property==="data"){if(a.autoprocess){var f=a.process(a.data)}if(a.loaded){a.render(f)}}})},getprocessor:function(){var a=this;a.processor=a.processor||new MEPH.signalprocessing.SignalProcessor(true);return a.processor},process:function(f){var e=this;var g=[].interpolate(0,Math.floor(f.length/e.step),function(c){return e.getprocessor().fft(f.subset(c*e.step,(c+1)*e.step))}).select(function(c){return c.skipEvery(2,function(h){return h})});var d=new Float32Array(f.length);g.foreach(function(h,c){h.foreach(function(i,k){d[c*e.step+k]=i})});var a=d.max(function(c){return c});var b=d.min(function(c){return c});return{res:d,max:a,min:b}},positionCanvas:function(b,c,a){Style.width(b,c);Style.height(b,a)},convertSourceToRGB:function(d){var c=this,d=d.res;d=d.select(function(e){return Math.pow(e,1)});var a=d.max(function(e){return e});var b=d.min(function(e){return e});return d.select(function(e){return((e-b)/a)*255})},render:function(b){var a=this;if(a.animFrame!==null){cancelAnimationFrame(a.animFrame)}a.animFrame=requestAnimationFrame(function(){var l,e,d;a.animFrame=null;if(!a.rendered){a.renderer.setCanvas(a.canvas)}a.renderer.clear();var j=a.convertSourceToRGB(b);var k=a.renderer.getContext();var c=k.createImageData(Math.floor(j.length/a.step),a.step);var f;for(f=0;f<c.data.length;f=f+4){c.data[f]=j[f];c.data[f+1]=j[f+1];c.data[f+2]=155;c.data[f+3]=255}var h=a.body.clientHeight;var g=a.body.clientWidth;a.positionCanvas(a.canvas,g,h);a.renderer.draw({simple:true,shape:MEPH.util.Renderer.shapes.canvas,canvas:c})})}});